import { resolve } from "node:path";
import { writeFileSync } from "node:fs";
import { homedir } from "node:os";

import { createKeyPairSignerFromBytes, type KeyPairSigner } from "@solana/signers";
import { extractBytesFromKeyPair } from "../core";
import { loadKeypairSignerFromFile } from "./load-keypair";

/**
 * Save an extractable `KeyPairSigner` to a filesystem wallet json file
 * (i.e. same format as those generated by the `solana-keygen` command)
 */
export async function saveKeypairSignerToFile(
  keypairSigner: KeyPairSigner,
  filePath: string,
): Promise<boolean> {
  return saveKeypairToFile(keypairSigner.keyPair, filePath);
}

/**
 * Save an extractable `CryptoKeyPair` to a filesystem wallet json file
 * (i.e. same format as those generated by the `solana-keygen` command)
 */
export async function saveKeypairToFile(
  keypair: CryptoKeyPair,
  filePath: string,
): Promise<boolean> {
  if (!filePath.endsWith(".json")) {
    throw new Error("Must provide a json file path to save keypair to");
  }

  const resolvedPath = resolve(
    filePath.startsWith("~") ? filePath.replace("~", homedir()) : filePath,
  );

  // initialized in multiple steps to help deallocate the variable faster
  let bytes: Uint8Array | null;
  bytes = await extractBytesFromKeyPair(keypair);
  writeFileSync(resolvedPath, "[" + Array.from(bytes).toString() + "]", "utf8");

  const [input, output] = await Promise.all([
    createKeyPairSignerFromBytes(bytes),
    loadKeypairSignerFromFile(resolvedPath),
  ]);

  // help force the key bytes to be deallocated faster
  bytes = null;

  return input.address === output.address;
}
